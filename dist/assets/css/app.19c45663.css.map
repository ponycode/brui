{"version":3,"sources":["webpack:///src/components/src/components/KegOnTap.vue","app.19c45663.css","webpack:///src/components/src/components/AddAKegModal.vue","webpack:///src/views/src/views/Menu.vue","webpack:///src/views/src/views/Settings.vue","webpack:///src/views/src/views/Beers.vue","webpack:///src/views/src/views/Stats.vue","webpack:///src/views/src/views/BeerDetails.vue","webpack:///src/src/App.vue"],"names":[],"mappings":"AAwDA,oBACA,eAAA,CACA,kBCtDA,CDyDA,oBACA,eAAA,CACA,kBCvDA,CD0DA,4BACA,YAAA,CACA,eAAA,CACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBAAA,CACA,uBClDA,CDqDA,gCACA,UAAA,CACA,WAAA,CACA,WAAA,CACA,aCnDA,CDsDA,uBACA,cAAA,CACA,eAAA,CACA,iBCpDA,CDuDA,6BACA,cAAA,CACA,eAAA,CACA,wBCrDA,CDwDA,8BACA,eAAA,CACA,cAAA,CACA,eAAA,CACA,wBCtDA,CC6BA,qCACA,UDlBA,CEEA,oBACA,UAAA,CACA,eAAA,CACA,0CAAA,CACA,cAAA,CACA,kBAAA,CACA,eFEA,CECA,qCACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBFOA,CEJA,2BACA,eAAA,CACA,gBAAA,CACA,wBFMA,CGGA,2BACA,qBAAA,CACA,oBAAA,CACA,WAAA,CAEA,UHEA,CI7CA,gDCqBA,qBAAA,CACA,oBAAA,CACA,eAAA,CACA,ULuCA,CIxDA,+BACA,cJ0DA,CMqEA,8BACA,qBAAA,CACA,oBAAA,CACA,WAAA,CACA,UNhEA,CMmEA,4BACA,gBAAA,CACA,UAAA,CACA,aNjEA,COwBA,UACA,WAAA,CACA,UPnBA,COsBA,KACA,wBAAA,CACA,UAAA,CACA,sDPpBA,COuBA,MACA,iBAAA,CACA,WAAA,CACA,UPrBA,COwBA,gBACA,qBAAA,CACA,kBAAA,CACA,cAAA,CACA,QAAA,CACA,SAAA,CACA,UAAA,CACA,WAAA,CACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBAAA,CACA,cPhBA,COmBA,oBACA,cAAA,CACA,UPjBA,COoBA,WACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,kBAAA,CACA,iBAAA,CACA,WAAA,CACA,YAAA,CACA,YAAA,CACA,kBAAA,CACA,WAAA,CACA,qBAAA,CACA,uBAAA,CAKA,UAAA,CACA,SPlBA,COqBA,kBACA,SPlBA,COsBA,UACA,wCAAA,CAAA,gCAAA,CAAA,wBAAA,CAAA,8CPjBA,COuBA,wCACA,WPlBA","file":"app.19c45663.css","sourcesContent":["<template>\n  <div class=\"beerOnTap text-center\" v-if=\"beer && !beer.empty\">\n    <h2 class=\"mb-1\">{{beer.name}}</h2>\n    <b-button class=\"mt-0 mb-2\" v-if=\"!fullscreen\" variant=\"outline-danger\" size=\"sm\" v-b-modal=\"'removeKegConfirmation-' + tapIndex\"><font-awesome-icon icon=\"times-circle\" class=\"mr-2\"/>Remove Keg</b-button>\n    <div class=\"beerImage mt-3\" v-if=\"beer.imageUrl\">\n      <img :src=\"beer.imageUrl\" />\n    </div>\n    <div>\n      <span v-if=\"beer.abv\" class=\"spec\">{{beer.abv}}% <span class=\"unit\">ABV</span></span>\n      <span v-if=\"beer.ibu\" class=\"spec\">{{beer.ibu}} <span class=\"unit\">IBU</span></span>\n    </div>\n    <p class='description'>{{beer.description}}</p>\n\n    <b-modal :id=\"'removeKegConfirmation-' + tapIndex\" title=\"Remove Keg?\" ref=\"modal\" size=\"lg\" ok-title=\"Yes, Remove Keg\" ok-variant=\"danger\" @ok=\"removeKeg\" modal-class=\"removeKegConfirmation\">\n      <h3>{{beer.name}}</h3>\n      <p class=\"mt-3\">\n        Removing this keg will finalize all pour reporting.\n      </p>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\n\nexport default {\n  name: 'kegOnTap',\n  props: {\n    tapIndex: {\n      type: Number,\n      required: true\n    },\n    keg: {\n      type: Object,\n      required: false\n    }\n  },\n  computed: {\n    ...mapState({\n      fullscreen: state => state.fullscreen\n    }),\n    beer () {\n      if( !this.keg ) return null\n      return this.keg.Beer\n    }\n  },\n  methods: {\n    removeKeg(){\n      this.$store.dispatch( 'removeKegFromTap', { tapIndex: this.tapIndex })\n    }\n  }\n}\n</script>\n\n<style type=\"scss\" scoped>\n\nh2{\n  font-weight: 400;\n  margin-bottom: 20px;\n}\n\nh5 {\n  font-weight: 200;\n  margin-bottom: 20px;\n}\n\n.beerImage {\n  height: 250px;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto 20px auto;\n}\n\n.beerImage img {\n  width: 100%;\n  height: auto;\n  margin: auto;\n  max-width: 80%;\n}\n\n.spec {\n  font-size: 30px;\n  font-weight: 300;\n  margin-right: 14px;\n}\n\n.spec .unit {\n  font-size: 20px;\n  font-weight: 100;\n  color: rgba( 255, 255, 255, 0.8 );\n}\n\n.description {\n  margin-top: 40px;\n  font-size: 20px;\n  font-weight: 300;\n  color: rgba( 255, 255, 255, 0.8 );\n}\n\n</style>\n\n<style type=\"scss\">\n\n.removeKegConfirmation{\n  color: #333;\n}\n\n</style>\n","\nh2[data-v-129e2772]{\n  font-weight: 400;\n  margin-bottom: 20px;\n}\nh5[data-v-129e2772] {\n  font-weight: 200;\n  margin-bottom: 20px;\n}\n.beerImage[data-v-129e2772] {\n  height: 250px;\n  overflow: hidden;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  margin: 0 auto 20px auto;\n}\n.beerImage img[data-v-129e2772] {\n  width: 100%;\n  height: auto;\n  margin: auto;\n  max-width: 80%;\n}\n.spec[data-v-129e2772] {\n  font-size: 30px;\n  font-weight: 300;\n  margin-right: 14px;\n}\n.spec .unit[data-v-129e2772] {\n  font-size: 20px;\n  font-weight: 100;\n  color: rgba( 255, 255, 255, 0.8 );\n}\n.description[data-v-129e2772] {\n  margin-top: 40px;\n  font-size: 20px;\n  font-weight: 300;\n  color: rgba( 255, 255, 255, 0.8 );\n}\n\n\n\n.removeKegConfirmation{\n  color: #333;\n}\n\n\n\n#addAKegModal{\n  color: #333;\n}\n\n\nh1[data-v-3975ad35] {\n  color: #ccc;\n  font-weight: 100;\n  border-bottom: 1px solid rgba( 255, 255, 255, 0.2 );\n  padding: 12px 0;\n  margin-bottom: 30px;\n  font-size: 1.8em;\n}\n.beerOnTapContainer[data-v-3975ad35] {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n}\n.emptyTap[data-v-3975ad35]{\n  font-size: 100px;\n  margin-top: 100px;\n  color: rgba( 255, 255, 255, 0.2 );\n}\n\n\n\n.settings[data-v-78ce51a5]{\n  background-color: white;\n  padding-bottom: 100px;\n  height: 100%;\n\n  color: #333;\n}\n\n\n\n.stats[data-v-f693c7bc]{\n  background-color: white;\n  padding-bottom: 100px;\n  min-height: 100%;\n  color: #333;\n}\n\n\n\n.beers[data-v-039866fc]{\n  background-color: white;\n  padding-bottom: 100px;\n  min-height: 100%;\n  color: #333;\n}\n.beerTable td[data-v-039866fc] {\n  cursor: pointer;\n}\n\n\n\n.beerDetails[data-v-7652b1b7] {\n  background-color: white;\n  padding-bottom: 100px;\n  height: 100%;\n  color: #333;\n}\n.beerImage[data-v-7652b1b7] {\n  max-height: 300px;\n  width: auto;\n  margin: 0 auto;\n}\n\n\n\nHTML, BODY {\n  height: 100%;\n  width: 100%;\n}\nBODY {\n  background-color: rgb(73,73,73);\n  color: white;\n  background: radial-gradient(circle, rgba(73,73,73,1) 0%, rgba(0,0,0,1) 100%);\n}\n.root {\n  position: relative;\n  height: 100%;\n  width: 100%;\n}\n.exitFullscreen {\n  background-color: black;\n  border-radius: 60px;\n  position: fixed;\n  top: 10px;\n  left: 10px;\n  width: 40px;\n  height: 40px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  cursor: pointer;\n}\n.exitFullscreen svg {\n  font-size: 26px;\n  color: white;\n}\n.pourModal{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-left: -300px;\n  margin-top: -200px;\n  width: 600px;\n  height: 400px;\n  padding: 40px;\n  border-radius: 30px;\n  z-index: 999;\n  background-color: #222;\n  border: 1px solid silver;\n  /*box-shadow: 0 0 30px rgba( 0, 0, 0, 0.5 );*/\n  /*transform: translate3d( 0, 0, 0 );*/\n  /*transform: translate3d( 0, 530px, 0 );*/\n  /* transition: transform 0.3s; */\n  color: white;\n  opacity: 0.0;\n}\n.pourModalVisible {\n  opacity: 1.0;\n  /* transform: translate3d( 0, 530px, 0 ); */\n}\n.beerHead{\n  -webkit-transition: 0.5s -webkit-transform;\n  transition: 0.5s -webkit-transform;\n  transition: 0.5s transform;\n  transition: 0.5s transform, 0.5s -webkit-transform;\n}\n.pourModalBeerName {\n  height: 40px;\n}\n.pourModalPourAmount {\n  height: 40px;\n}\n\n\n\n/*# sourceMappingURL=app.19c45663.css.map*/","<template>\n  <b-modal id=\"addAKegModal\" title=\"Add a Keg\" ref=\"modal\" size=\"lg\">\n\n    <b-input-group class=\"\">\n      <template v-slot:append>\n        <b-input-group-text><font-awesome-icon icon=\"search\" /></b-input-group-text>\n      </template>\n      <b-form-input placeholder=\"Search for a beer\" debounce=\"500\" v-model=\"searchTerm\"></b-form-input>\n    </b-input-group>\n\n    <div v-if=\"searchTerm && this.beers\" class=\"results mt-3\">\n      <b-list-group>\n        <b-list-group-item v-for=\"beer in beers\" :key=\"beer.beerId\" href=\"#\" button @click=\"selectBeer(beer)\">{{beer.name}}</b-list-group-item>\n      </b-list-group>\n    </div>\n\n    <template v-slot:modal-footer=\"{ ok, cancel, hide }\">\n       <div></div>\n    </template>\n\n  </b-modal>\n</template>\n\n<script>\nimport { getBeerSearch } from '../api/beers'\nimport  { socket } from '../sockets'\n\nexport default {\n  name: 'AddAKegModal',\n  data () {\n    return {\n      tapIndex: null,\n      searchTerm: null,\n      beers: null\n    }\n  },\n  methods: {\n    show( tapIndex ){\n      this.tapIndex = tapIndex\n      this.$refs.modal.show()\n    },\n    async performSearch () {\n      if( this.searching ) return\n      \n      if( !this.searchTerm || this.searchTerm.length < 3 ){\n        this.beers = null\n        return\n      }\n\n      try{\n        this.searching = true\n        this.beers = await getBeerSearch( this.searchTerm )\n        this.searching = false\n      }catch( e ){\n        this.searching = false\n        this.beers = null\n      }\n    },\n    selectBeer ( beer ) {\n      this.$store.dispatch( 'putKegOnTap', { tapIndex: this.tapIndex, beerId: beer.beerId, gallons: 5 })\n      socket.sendMessage( { type: 'get_keg_statuses' } )\n      this.$refs.modal.hide()\n    },\n  },\n  watch: {\n    searchTerm () {\n      this.performSearch();\n    }\n  }\n}\n</script>\n\n<style type=\"scss\">\n#addAKegModal{\n  color: #333;\n}\n</style>\n","<template>\n  <div class=\"menuContent\">\n    <div class=\"row\">\n      <div class=\"col text-center\" v-for=\"tap in taps\" :key=\"tap.tapIndex\">\n        <h1>\n          {{tap.tapName}}\n          <span v-if=\"kegStatuses && kegStatuses[tap.tapIndex]\" class=\"float-right\">\n            {{kegStatuses[tap.tapIndex].remainingPercent}}%\n          </span>\n        </h1>\n        <div class=\"beerOnTapContainer\">\n          <keg-on-tap v-if=\"tap.Keg\" :keg=\"tap.Keg\" :tap-index=\"tap.tapIndex\"></keg-on-tap>\n          <div v-else>\n            <div class=\"emptyTap\">\n              <font-awesome-icon icon=\"sad-cry\" />\n            </div>\n            <b-button v-if=\"!fullscreen\" size=\"sm\" variant=\"outline-light\" @click=\"addAKeg(tap.tapIndex)\">Add a Keg</b-button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <add-a-keg-modal ref=\"addAKegModal\"></add-a-keg-modal>\n  </div>\n</template>\n\n<script>\nimport KegOnTap from '@/components/KegOnTap'\nimport AddAKegModal from '@/components/AddAKegModal'\n\nimport { mapState } from 'vuex'\n\nexport default {\n  name: 'menu',\n  components: {\n    KegOnTap,\n    AddAKegModal\n  },\n  computed: mapState({\n    fullscreen: state => state.fullscreen,\n    taps: state => state.taps,\n    kegStatuses: state => state.kegStatuses\n  }),\n  methods: {\n    removeKegOnTapWithIndex( tapIndex ){\n      this.$store.dispatch( 'removeKegFromTap', { tapIndex })\n    },\n    addAKeg( tapIndex ){\n      this.$refs.addAKegModal.show( tapIndex )\n    }\n  },\n  mounted () {\n    this.$store.dispatch('fetchTaps')\n  }\n}\n</script>\n\n<style type=\"scss\" scoped>\n\nh1 {\n  color: #ccc;\n  font-weight: 100;\n  border-bottom: 1px solid rgba( 255, 255, 255, 0.2 );\n  padding: 12px 0;\n  margin-bottom: 30px;\n  font-size: 1.8em;\n}\n\n.beerOnTapContainer {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.emptyTap{\n  font-size: 100px;\n  margin-top: 100px;\n  color: rgba( 255, 255, 255, 0.2 );\n}\n\n</style>\n","<template>\n  <div class=\"settings\">\n    <br/>\n\n    <b-form v-on:submit.prevent=\"onSubmit\">\n      <b-row>\n        <b-col md=\"4\">\n            <b-form-group label=\"Number of Taps\">\n              <b-form-select v-model=\"numberOfTaps\" :options=\"numberOfTapsOptions\" class=\"mb-3\" />\n            </b-form-group>\n        </b-col>\n      </b-row>\n\n      <b-row v-for=\"index in numberOfTaps\" :key=\"index\">\n        <b-col md=\"4\">\n          <b-form-group :label=\"` Tap ${index} Name`\" :label-for=\"`tap-${index}-name`\"> \n            <b-input-group>\n              <b-input :id=\"`tap-${index}-name`\" v-model=\"tapNames[index - 1]\"/>\n              <b-input-group-append>\n                <b-button variant=\"outline-success\" @mousedown=\"pourSimulatorListener.startPour(index - 1)\" @mouseup=\"pourSimulatorListener.endPour(index - 1)\">Simulate Pour</b-button>\n              </b-input-group-append>\n            </b-input-group>\n          </b-form-group>\n        </b-col>\n      </b-row>\n\n      <b-row>\n        <b-col md=\"4\">\n          <b-button type=\"submit\" variant=\"primary\">Save</b-button>\n        </b-col>\n      </b-row>\n\n    </b-form>\n\n  </div>\n</template>\n\n<script>\nimport {mapState} from 'vuex'\nimport PourSimulatorListener from '../lib/pourSimulatorBindings'\nconst pourSimulatorListener = new PourSimulatorListener()\n\nexport default {\n  name: 'settings',\n  data () {\n    return {\n      numberOfTapsOptions: [\n        { value: 1, text: 'One, single tap kegarator' },\n        { value: 2, text: 'Two, dual tap kegarator' },\n        { value: 3, text: 'Triple tap kegarator' }\n      ],\n      numberOfTaps: 1,\n      tapNames: [],\n      pourSimulatorListener\n    };\n  },\n  computed: {\n    ...mapState({\n      settings: state => state.settings,\n    })\n  },\n  methods: {\n    async onSubmit () {\n      await this.$store.dispatch('saveSettings', {\n        numberOfTaps: this.numberOfTaps,\n        tapNames: this.tapNames\n      })\n      this.$toasted.success('Settings Updated', { singleton: true }).goAway(3000)\n    }\n  },\n  watch: {\n    settings () {\n      if( !this.settings ) return \n      this.numberOfTaps = this.settings.numberOfTaps\n      this.tapNames = this.settings.tapNames\n    }\n  },\n  async mounted () {\n    await this.$store.dispatch('fetchSettings')\n  }\n}\n</script>\n\n<style type=\"scss\" scoped>\n\n.settings{\n  background-color: white;\n  padding-bottom: 100px;\n  height: 100%;\n\n  color: #333;\n}\n\n</style>\n","<template>\n  <div class=\"beers\">\n    <br/>\n    <h1>Beers</h1>\n    \n    <b-table v-if=\"beers\" class=\"beerTable\" striped hover :items=\"beers\" :fields=\"fields\" :no-select-on-click=\"true\" @row-clicked=\"showDetails\">\n      <template v-slot:head(name)>\n        <div class=\"d-flex align-items-center justify-content-between\">\n            Beer Name: <b-button size=\"xs\" variant=\"primary\" to=\"/beers/new\">New Beer</b-button>\n        </div>\n      </template>\n    </b-table>\n\n  </div>\n</template>\n\n<script>\nimport {mapState} from 'vuex'\n\nexport default {\n  name: 'beers',\n  data () {\n    return {\n      fields: [{ key: 'name', label: 'Full Name' }]\n    };\n  },\n  computed: {\n    ...mapState({\n      beers: state => state.mostRecentBeers\n    })\n  },\n  methods: {\n    showDetails ({ beerId }) {\n      this.$router.push({ name: 'beerDetails', params: { beerId } })\n    },\n    newBeer () {\n      this.$router.push({ name: 'beerDetails' })\n    }\n  },\n  async mounted () {\n    await this.$store.dispatch('fetchMostRecentBeers')\n  }\n}\n</script>\n\n<style type=\"scss\" scoped>\n\n.beers{\n  background-color: white;\n  padding-bottom: 100px;\n  min-height: 100%;\n  color: #333;\n}\n\n.beerTable td {\n  cursor: pointer;\n}\n\n</style>\n","<template>\n  <div class=\"stats pt-3\">\n\n    <pours-chart></pours-chart>\n\n    <h3 class=\"mt-3\">Keg History</h3>\n    <table class=\"table mt-5\">\n      <tr>\n        <th>Beer</th>\n        <th>Poured</th>\n        <th>Number of Pours</th>\n        <th>Days on Tap</th>\n      </tr>\n      <tr v-for=\"beerStat in beerStats\" :key=\"beerStat.beerId\">\n        <td>{{beerStat.name}}</td>\n        <td>\n          <span v-if=\"beerStat.gallons > 1\">{{beerStat.gallons}} gal.</span>\n          <span v-else-if=\"beerStat.floz > 0\">{{beerStat.floz}} floz</span>\n          <span v-else>0 floz</span>\n        </td>\n        <td>{{beerStat.numberOfPours}}</td>\n        <td>{{beerStat.daysOnTap}}</td>\n      </tr>\n    </table>\n\n    <h3 class=\"mt-3\">Pour History</h3>\n    <table class=\"table\">\n      <tr>\n        <th>Date</th>\n        <th>Beer</th>\n        <th>Floz. / Milliliters</th>\n        <th>Duration</th>\n        <th>Ticks</th>\n      </tr>\n      <tr v-for=\"pour in pours\" :key=\"pour.pourId\">\n        <td>{{pour.createdAt | formatDate}}</td>\n        <td>{{pour.beerName}}</td>\n        <td>{{Math.round( (pour.milliliters * 0.0338 ) * 100 ) / 100}} floz / {{pour.milliliters}} ml</td>\n        <td>{{pour.durationSeconds}}s</td>\n        <td>{{pour.tickCount}}</td>\n      </tr>\n    </table>\n  </div>\n</template>\n\n<script>\nimport {mapState} from 'vuex'\nimport PoursChart from '../components/PoursChart'\n\nexport default {\n  name: 'stats',\n  components: { PoursChart },\n  computed: {\n    ...mapState({\n      pours: state => state.pours,\n      beerStats: state => state.beerStats\n    })\n  },\n  async mounted () {\n    this.$store.dispatch('fetchPours')\n    this.$store.dispatch('fetchBeerStats')\n  }\n}\n</script>\n\n<style type=\"scss\" scoped>\n\n.stats{\n  background-color: white;\n  padding-bottom: 100px;\n  min-height: 100%;\n  color: #333;\n}\n\n</style>\n","<template>\n  <div class=\"beerDetails pt-3\">\n\n    <router-link to=\"/beers\"><font-awesome-icon icon=\"chevron-left\" /> All Beers</router-link>\n\n    <b-form v-on:submit.prevent=\"onSubmit\">\n      <div class=\"row mt-3\">\n        <b-col md=\"6\">\n\n          <b-form-group label=\"Beer Name\" label-for=\"beerName\">\n            <b-form-input \n                          id=\"beerName\"\n                          type=\"text\"\n                          v-model=\"name\"\n                          required\n                          placeholder=\"Beer name\">\n            </b-form-input>\n          </b-form-group>\n\n          <b-form-group label=\"ABV\" label-for=\"abv\">\n            <b-form-input \n                          v-model=\"abv\"\n                          placeholder=\"ABV\">\n            </b-form-input>\n          </b-form-group>\n          \n          <b-form-group label=\"IBU\" label-for=\"ibu\">\n            <b-form-input \n                          type=\"number\"\n                          v-model=\"ibu\"\n                          placeholder=\"IBU\">\n            </b-form-input>\n          </b-form-group>\n\n          <b-form-group label=\"Description\" label-for=\"description\">\n            <b-form-textarea \n                            v-model=\"description\"\n                            placeholder=\"Beer description\"\n                            :rows=\"3\"\n                            :max-rows=\"6\">\n            </b-form-textarea>\n          </b-form-group>\n\n          <b-form-group v-if=\"beerId\" label=\"Image\" label-for=\"beerImage\">\n            <div v-if=\"imageUrl\">\n              <img :src=\"imageUrl\" class=\"beerImage\" /><br/>\n              <b-button variant=\"danger\" class=\"mt-2\" size=\"sm\" @click=\"deleteImage\">Delete Image</b-button>\n            </div>\n            <b-form-file\n              v-else\n              v-model=\"imageFile\"\n              :state=\"Boolean(imageFile)\"\n              placeholder=\"Choose a image or drop it here...\"\n              drop-placeholder=\"Drop image file here...\"\n              accept=\"image/*\"\n            ></b-form-file>\n          </b-form-group>\n        </b-col>\n      </div>\n    \n      <div class=\"row mt-4\">\n        <b-col>\n          <b-button variant=\"default-outline\" @click=\"reset\">Reset</b-button>\n          <b-button type=\"submit\" variant=\"primary\">{{saveButtonTitle}}</b-button>\n        </b-col>\n      </div>\n\n    </b-form>\n  </div>\n</template>\n\n<script>\nimport {mapState} from 'vuex'\nimport {deleteBeerImage, addBeerImage } from '../api/beers'\n\nexport default {\n  name: 'beerDetails',\n  props: {\n    beerId: {\n      type: String,\n      required: false\n    }\n  },\n  data () {\n    return {\n      name: null,\n      imageUrl: null,\n      deleteImageUrl: null,\n      addImageUrl: null,\n      abv: null,\n      ibu: null,\n      description: null,\n      empty: true,\n      imageFile: null\n    }\n  },\n  methods: {\n    async uploadFile(){\n      if( !this.imageFile || !this.addImageUrl ) return\n\n      const { type, name } = this.imageFile\n\n      const result = await addBeerImage ({\n        addImageUrl: this.addImageUrl,\n        imageFile: this.imageFile\n      })\n\n      console.log('FILE UPDATED', type, name, result )\n      await this.$store.dispatch('fetchBeerDetails', this.beerId )\n    },\n    async deleteImage(){\n      console.log(`DELETEING IMAGE ${this.deleteImageUrl}`)\n      console.log( 'DELETE IMAGE', await deleteBeerImage( this.deleteImageUrl ) )\n      await this.$store.dispatch('fetchBeerDetails', this.beerId )\n    },\n    async onSubmit () {\n      if( this.beerId ) {\n        await this.$store.dispatch('updateBeerDetails', this.updatedBeer )\n        this.$toasted.success('Beer Updated', { singleton: true }).goAway(3000)\n      } else {\n        await this.$store.dispatch('createNewBeer', this.updatedBeer )\n        this.$toasted.success('Beer Created', { singleton: true }).goAway(3000)\n      }\n    },\n    reset () {\n      const beer = this.beer\n      if( !beer ) return\n\n      this.name = beer.name\n      this.imageUrl = beer.imageUrl\n      this.deleteImageUrl = beer.deleteImageUrl\n      this.addImageUrl = beer.addImageUrl\n      this.abv = beer.abv\n      this.ibu = beer.ibu\n      this.description = beer.description\n    }\n  },\n  computed: {\n    ...mapState({\n      beer: state => state.beerDetails\n    }),\n    saveButtonTitle () {\n      if ( this.beerId ) {\n        return 'Update Beer'\n      } else { \n        return 'Create Beer'\n      }\n    },\n    updatedBeer () {\n      const b = {};\n      if( this.beerId ) b.beerId = this.beerId;\n      b.name = this.name;\n      b.imageUrl = this.imageUrl;\n      b.abv = this.abv;\n      b.ibu = this.ibu;\n      b.description = this.description;\n      return b;\n    }\n  },\n  watch: {\n    imageFile() {\n      this.uploadFile()\n    },\n    beer: {\n      immediate: true,\n      handler () {\n        if( !this.beerId && this.beer && this.beer.beerId ){\n          // created a new beer - update url and UI\n          return this.$router.push({ name: 'beerDetails', params: { beerId: this.beer.beerId } })\n        }\n        this.reset() // copy data into local data so it can be edited\n      }\n    }\n  },\n  async mounted () {\n    await this.$store.dispatch('fetchBeerDetails', this.beerId )\n  }\n}\n</script>\n\n<style type=\"scss\" scoped>\n\n.beerDetails {\n  background-color: white;\n  padding-bottom: 100px;\n  height: 100%;\n  color: #333;\n}\n\n.beerImage {\n  max-height: 300px;\n  width: auto;\n  margin: 0 auto;\n}\n\n</style>\n","<template>\n  <div class=\"root\">\n    <b-navbar toggleable=\"md\" type=\"dark\" variant=\"dark\" v-show=\"!fullscreen\">\n      <b-navbar-toggle target=\"nav_collapse\"></b-navbar-toggle>\n      <b-navbar-brand :to=\"{ name: 'menu' }\"><font-awesome-icon @click=\"enterFullScreen\" icon=\"arrows-alt\" class=\"mr-2\"/> BRUI</b-navbar-brand>\n\n      <b-collapse is-nav id=\"nav_collapse\">\n\n        <b-navbar-nav>\n        </b-navbar-nav>\n\n        <b-navbar-nav class=\"ml-auto\">\n          <b-nav-item :to=\"{ name: 'beers' }\">Beers</b-nav-item>\n          <b-nav-item :to=\"{ name: 'stats' }\">Stats</b-nav-item>\n          <b-nav-item :to=\"{ name: 'settings' }\"><font-awesome-icon icon=\"cog\" /> Settings</b-nav-item>\n        </b-navbar-nav>\n      </b-collapse>\n    </b-navbar>\n    \n    <router-view class=\"container-fluid\"/>\n    \n    <a v-show=\"fullscreen\" @click=\"exitFullscreen\" class=\"exitFullscreen\">\n      <font-awesome-icon icon=\"compress-arrows-alt\" />\n    </a>\n\n    <div class=\"pourModal\" ref=\"pourModal\">\n      <h1 class=\"lead\">You are Pouring</h1>\n      <h2 class=\"pourModalBeerName\" ref=\"pourModalBeerName\"></h2>\n      <h3 class=\"text-success pourModalPourAmount\" ref=\"pourModalPourAmount\"></h3>\n\n      <div class=\"text-center mt-4\">\n        <svg width=\"111px\" height=\"150px\" viewBox=\"0 0 150 203\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n            <!-- Generator: Sketch 52.6 (67491) - http://www.bohemiancoding.com/sketch -->\n            <title>Beer</title>\n            <desc>Created with Sketch.</desc>\n            <defs>\n                <path d=\"M102.6,189.5 L20.4,189.5 C18.2,189.5 16.4,187.7 16.4,185.5 L0.6,4.6 C0.6,2.4 2.4,0.6 4.6,0.6 L117.6,0.6 C119.8,0.6 121.6,2.4 121.6,4.6 L106.6,185.5 C106.6,187.8 104.8,189.5 102.6,189.5 Z\" id=\"path-1\"></path>\n            </defs>\n            <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g id=\"Beer\">\n                    <path d=\"M125.9,202.1 L22.5,202.1 C18.9,202.1 15.9,199.1 15.9,195.5 L0.7,7.4 C0.7,3.8 3.7,0.8 7.3,0.8 L142.8,0.8 C146.4,0.8 149.4,3.8 149.4,7.4 L132.4,195.5 C132.5,199.1 129.5,202.1 125.9,202.1 Z\" id=\"Glass\" fill=\"#FFFFFF\" opacity=\"0.08\"></path>\n                    <polygon id=\"Reflection\" fill=\"#FFFFFF\" opacity=\"0.2\" points=\"60.9 202.1 32 202.1 13 0.8 41.9 0.8\"></polygon>\n                    <g id=\"Glass\" transform=\"translate(14.000000, 1.000000)\">\n                        <mask id=\"mask-2\" fill=\"white\">\n                            <use xlink:href=\"#path-1\"></use>\n                        </mask>\n                        <g id=\"Path\"></g>\n                        <g id=\"BeerHead\" mask=\"url(#mask-2)\">\n                            <g transform=\"translate(-82.311516, 160.025045)\" id=\"Rectangle\" ref=\"pourModalBeerHead\" class=\"beerHead\">\n                                <rect fill=\"#FFB241\" x=\"0.3\" y=\"27.3\" width=\"294\" height=\"164.7\"></rect>\n                                <rect fill=\"#FFEBD3\" x=\"0.3\" y=\"0\" width=\"294\" height=\"29.3\"></rect>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </svg>\n      </div>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport { pourEventBus, socket } from './sockets'\n\nexport default {\n  data () {\n    return {\n      currentPour: null\n    }\n  },\n  computed: {\n    ...mapState({\n      fullscreen: state => state.fullscreen\n    })\n  },\n  methods: {\n    enterFullScreen () {\n      if( document.fullscreenEnabled ){\n          document.documentElement.requestFullscreen();\n      }\n      this.$store.commit('FULLSCREEN', true)\n    },\n    exitFullscreen () {\n      if( document.fullscreenEnabled ){\n        document.exitFullscreen();\n      }\n      this.$store.commit('FULLSCREEN', false)\n    },\n    pourEvent( message ){\n      if( message.type === 'pour_start' ){\n        this.$refs.pourModalBeerName.innerHTML = message.beerName\n        this.$refs.pourModal.classList.add('pourModalVisible');\n      }else if( message.type === 'pour_status' ){\n        const { milliliters } = message\n        const floz = milliliters * 0.0338\n\n        if( this.$refs.pourModalBeerHead ){\n          const percentOfGlass = floz / 10; // 10 oz cup\n          const totalMovement = 100;\n          const offset = Math.round( totalMovement * percentOfGlass );\n\n          const start = 160.025045; // stolen from original y translate in svg\n          \n          this.$refs.pourModalBeerHead.setAttribute( 'transform',`translate( -82.311516, ${start - offset} )`);\n        }\n\n        if( this.$refs.pourModalPourAmount ){\n          this.$refs.pourModalPourAmount.innerHTML = `${floz.toFixed(1)} floz`\n        }\n\n      }else if( message.type === 'pour_end' ){\n        this.$refs.pourModal.classList.remove('pourModalVisible');\n        \n        const start = 160.025045; // stolen from original y translate in svg\n        this.$refs.pourModalBeerHead.setAttribute( 'transform',`translate( -82.311516, ${start})`);\n      }\n    }\n  },\n  mounted () {\n    pourEventBus.register( this.pourEvent );\n\n    document.addEventListener( 'fullscreenchange', () => {\n      if( document.fullscreenEnabled ){\n        if( document.fullscreenElement ){\n          this.$store.commit('FULLSCREEN', true)\n        } else {\n          this.$store.commit('FULLSCREEN', false)\n        }\n      }\n    });\n\n    document.addEventListener(\"keydown\", event => {\n      if( event.isComposing || event.keyCode === 229 ) {\n        return; // IME composition - WTF is IME composition?\n      }\n\n      if( event.key === 's' ){\n        socket.sendMessage({ type: 'screen_sleep' });\n      }else if( event.key === 'w' ){\n        socket.sendMessage({ type: 'screen_wake' });\n      }\n    });\n  }\n}\n</script>\n\n<style type=\"scss\">\n\nHTML, BODY {\n  height: 100%;\n  width: 100%;\n}\n\nBODY {\n  background-color: rgb(73,73,73);\n  color: white;\n  background: radial-gradient(circle, rgba(73,73,73,1) 0%, rgba(0,0,0,1) 100%);\n}\n\n.root {\n  position: relative;\n  height: 100%;\n  width: 100%;\n}\n\n.exitFullscreen {\n  background-color: black;\n  border-radius: 60px;\n  position: fixed;\n  top: 10px;\n  left: 10px;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n.exitFullscreen svg {\n  font-size: 26px;\n  color: white;\n}\n\n.pourModal{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-left: -300px;\n  margin-top: -200px;\n  width: 600px;\n  height: 400px;\n  padding: 40px;\n  border-radius: 30px;\n  z-index: 999;\n  background-color: #222;\n  border: 1px solid silver;\n  /*box-shadow: 0 0 30px rgba( 0, 0, 0, 0.5 );*/\n  /*transform: translate3d( 0, 0, 0 );*/\n  /*transform: translate3d( 0, 530px, 0 );*/\n  /* transition: transform 0.3s; */\n  color: white;\n  opacity: 0.0;\n}\n\n.pourModalVisible {\n  opacity: 1.0;\n  /* transform: translate3d( 0, 530px, 0 ); */\n}\n\n.beerHead{\n  transition: 0.5s transform;\n}\n\n.pourModalBeerName {\n  height: 40px;\n}\n.pourModalPourAmount {\n  height: 40px;\n}\n\n</style>\n"]}